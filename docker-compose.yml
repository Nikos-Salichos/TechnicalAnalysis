version: '3.4'

volumes:
  app-data:  # Define the shared volume

networks:
    postgres-db-network:
        driver: bridge
    otel:

services:

  ta.gateway:
    image: ${DOCKER_REGISTRY-}technicalanalysisinfrastructuregateway
    container_name: ta-gateway
    build:
      context: .
      dockerfile: TechnicalAnalysis.Infrastructure.Gateway/Dockerfile
    networks:
      - postgres-db-network

  ta.api:
    image: ${DOCKER_REGISTRY-}infrastructurehost
    container_name: ta-api
    depends_on:
     postgresql.api:
        condition: service_healthy
    build:
      context: .
      dockerfile: TechnicalAnalysis.Infrastructure.Host/Dockerfile
    user: root
    ports:
      - 5000:5000
    environment:
     DB_CONNECTION_STRING: "Host=postgresql.api;Port=5432;Database=TechnicalAnalysis;Username=postgres;Password=admin"
     OTEL_EXPORTER_OTLP_ENDPOINT: "http://ta.aspire.dashboard:18889"
    networks:
      - postgres-db-network
      - otel
#Be careful and use same path
    volumes:
      - ./TechnicalAnalysis.Infrastructure.Host/appsettings.prod.json:/app/appsettings.prod.json
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health && curl -f https://localhost:5001/health || exit 1"] #
      interval: 10s
      timeout: 5s
      retries: 3

  redis.api:
    image: redis
    container_name: ta-redis
    restart: always
    ports:
     - "6379:6379"
    environment:
     - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - postgres-db-network

  rabbitmq:
    image: rabbitmq:management
    container_name: ta-rmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - postgres-db-network

  postgresql.api:
    image: postgres:latest
    container_name: ta-postgresql
    restart: always
    ports:
     - "5432:5432"
    environment:
      POSTGRES_DB: "TechnicalAnalysis"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes: 
       - ./postgres-data:/var/lib/postgresql/data
       # copy the sql script to create tables
       - ../TechnicalAnalysis/createTables.sql:/docker-entrypoint-initdb.d/createTables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
       - postgres-db-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ta-pgadmin
    restart: always
    environment:
        PGADMIN_DEFAULT_EMAIL: 'admin@admin.com'
        PGADMIN_DEFAULT_PASSWORD: 'admin'
    ports:
        - 16543:80
    networks:
        - postgres-db-network

  seq:
    container_name: ta-seq
    image: datalust/seq:latest
    ports:
      - 5341:80
    environment:
      - ACCEPT_EULA=Y 
    networks:
      - postgres-db-network

  grafana:
    container_name: ta-grafana
    image: grafana/grafana:master
    ports:
      - "3000:3000"
    volumes:
        - ./Grafana/Datasources:/etc/grafana/provisioning/datasources
        - ./Grafana/Dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
        prometheus:
            condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  prometheus:
    image: prom/prometheus
    container_name: ta-prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  ta.aspire.dashboard:
    image: mcr.microsoft.com/dotnet/nightly/aspire-dashboard:8.0.0-preview.4
    container_name: ta.aspire.dashboard
    ports:
      - 18888:18888
    networks:
      - otel